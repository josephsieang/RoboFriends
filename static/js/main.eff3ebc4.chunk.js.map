{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","id","name","email","className","alt","src","CardList","cardComponent","robots","map","robotObj","_idx","key","SearchBox","getSearchField","aria-label","type","placeholder","onChange","Scroll","children","ErrorBoundary","hasError","info","this","_error","React","Component","App","event","setState","searchField","target","value","fetch","response","json","users","getFilteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eff3ebc4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n  const { id, name, email } = props;\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2'>\n      <img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = (props) => {\n  const { robots } = props;\n  const cardComponent = robots.map((robotObj, _idx) => {\n    return (\n      <Card\n        key={robotObj.id}\n        id={robotObj.id}\n        name={robotObj.name}\n        email={robotObj.email}\n      ></Card>\n    );\n  });\n\n  return <>{cardComponent}</>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nimport './SearchBox.css';\n\nconst SearchBox = (props) => {\n  const { getSearchField } = props;\n  return (\n    <div>\n      <input\n        aria-label='search robot'\n        className='pa3 ba b--green bg-lightest-blue mb4'\n        type='search'\n        placeholder='Search Robots'\n        onChange={getSearchField}\n      ></input>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nimport \"./Scroll.css\";\n\nconst Scroll = (props) => {\n  return <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  static getDerivedStateFromError(_error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(\"error: \" + error);\n    console.log(\"info: \" + info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. Error encountered</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  // not using arrow function since it is a react function\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  getSearchField = (event) => {\n    this.setState({ searchField: event.target.value });\n    console.log(event.target.value);\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const getFilteredRobots = robots.filter((robotObj) => {\n      return robotObj.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (robots.length === 0) {\n      return (\n        <div className=\"LoadingDiv\">\n          <h1> Loading...</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1>RobotFriends</h1>\n          <SearchBox getSearchField={this.getSearchField} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={getFilteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <App />\n    </>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}